import 'dart:io';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:image_picker/image_picker.dart';
import 'package:path_provider/path_provider.dart';
import 'package:sep/components/coreComponents/TextView.dart';
import 'package:sep/components/styles/appImages.dart';
import 'package:sep/feature/data/models/dataModels/profile_data/profile_data_model.dart';
import 'package:sep/feature/presentation/controller/chat_ctrl.dart';
import 'package:sep/utils/appUtils.dart';
import 'package:sep/utils/extensions/contextExtensions.dart';
import 'package:sep/utils/extensions/extensions.dart';
import 'package:sep/utils/extensions/size.dart';
import 'package:sep/utils/extensions/textStyle.dart';
import 'package:sep/utils/extensions/widget.dart';
import '../../../components/coreComponents/ImageView.dart';
import '../../../components/styles/appColors.dart';
import '../../../services/storage/preferences.dart';
import '../profileScreens/friend_profile_screen.dart';
import 'Chat_Sample.dart';
import 'ImagePreviewScreen.dart';
import 'VideoPreviewScreen.dart';
import 'package:path/path.dart' as path;

class MessageScreen extends StatefulWidget {
  final ProfileDataModel? data;
  final String? chatId;

  const MessageScreen({super.key, this.data, this.chatId});

  @override
  State<MessageScreen> createState() => _MessageScreenState();
}

class _MessageScreenState extends State<MessageScreen> {
  ProfileDataModel? data;
  final ctrl = ChatCtrl.find;

  final msgCtrl = TextEditingController();
  bool isEmojiVisible = false;
  final FocusNode _focusNode = FocusNode();

  bool _isEmojiVisible = false;

  void _toggleEmojiKeyboard() {
    if (_isEmojiVisible) {
      FocusScope.of(context).requestFocus(_focusNode);
    } else {
      FocusScope.of(context).unfocus();
    }
    setState(() {
      _isEmojiVisible = !_isEmojiVisible;
    });
  }

  void _hideEmojiKeyboard() {
    if (_isEmojiVisible) {
      setState(() {
        _isEmojiVisible = false;
      });
      FocusScope.of(context).unfocus();
    }
  }

  final List<String> emojis = [
    'üòÄ',
    'üòÉ',
    'üòÑ',
    'üòÅ',
    'üòÜ',
    'üòÖ',
    'üòÇ',
    'ü§£',
    'üòä',
    'üòá',
    'üôÇ',
    'üòâ',
    'üòå',
    'üòç',
    'ü•∞',
    'üòò',
    'üòó',
    'üòô',
    'üòö',
    'ü§ó',
    'ü§≠',
    'ü§´',
    'ü§î',
    'ü§ê',
    'ü§®',
    'üòê',
    'üòë',
    'üò∂',
    'üôÑ',
    'üòè',
    'üò£',
    'üò•',
    'üòÆ',
    'üòØ',
    'üò≤',
    'üò≥',
    'ü•∫',
    'üò¶',
    'üòß',
    'üò®',
    'üò∞',
    'üò¢',
    'üò≠',
    'üò±',
    'üò§',
    'üò†',
    'üò°',
    'ü§¨',
    'ü§Ø',
    'üò¨',
    'üòì',
    'üòû',
    'üòü',
    'üòî',
    'üòï',
    'üôÉ',
    'ü´†',
    'ü•¥',
    'üòµ',
    'üòµ‚Äçüí´',
    'ü§ï',
    'ü§í',
    'ü§¢',
    'ü§Æ',
    'ü§ß',
    'üò∑',
    '‚ù§Ô∏è',
    'üß°',
    'üíõ',
    'üíö',
    'üíô',
    'üíú',
    'ü§é',
    'üñ§',
    'ü§ç',
    'üíñ',
    'üíó',
    'üíò',
    'üíù',
    'üíì',
    'üíû',
    'üíï',
    'üíå',
    'üíü',
    '‚ù£Ô∏è',
    'üíî',
    '‚ù§Ô∏è‚Äçüî•',
    '‚ù§Ô∏è‚Äçü©π',
    'üôã‚Äç‚ôÇÔ∏è',
    'üôã‚Äç‚ôÄÔ∏è',
    'üôå',
    'üëã',
    'ü§ö',
    'üñêÔ∏è',
    '‚úã',
    'üññ',
    'üëå',
    'ü§å',
    'ü§è',
    '‚úåÔ∏è',
    'ü§û',
    'ü´∞',
    'ü§ü',
    'ü§ò',
    'ü§ô',
    'üëà',
    'üëâ',
    'üëÜ',
    'üñï',
    'üëá',
    '‚òùÔ∏è',
    'üëç',
    'üëé',
    'üëä',
    'ü§õ',
    'ü§ú',
    'üëè',
    'ü´∂',
    'ü§ù',
    'üôè',
    'ü´°',
    'üßë',
    'üë®',
    'üë©',
    'üë∂',
    'üßí',
    'üë¶',
    'üëß',
    'üëµ',
    'üë¥',
    'üßì',
    'üë©‚Äçü¶≥',
    'üë®‚Äçü¶≥',
    'üßî‚Äç‚ôÇÔ∏è',
    'üë®‚Äçü¶∞',
    'üë©‚Äçü¶∞',
    'üë®‚Äçü¶±',
    'üë©‚Äçü¶±',
    'üë®‚Äçü¶≤',
    'üë©‚Äçü¶≤',
    'üê∂',
    'üê±',
    'üê≠',
    'üêπ',
    'üê∞',
    'ü¶ä',
    'üêª',
    'üêº',
    'üê®',
    'üêØ',
    'ü¶Å',
    'üêÆ',
    'üê∑',
    'üê∏',
    'üêµ',
    'üêî',
    'üêß',
    'üê¶',
    'üê§',
    'üê£',
    'üê•',
    'ü¶Ü',
    'ü¶Ö',
    'ü¶â',
    'üêù',
    'ü™≤',
    'ü¶ã',
    'üêõ',
    'üêå',
    'üêû',
    'üêú',
    'üê¢',
    'üêç',
    'ü¶é',
    'üêô',
    'ü¶ë',
    'üçè',
    'üçé',
    'üçê',
    'üçä',
    'üçã',
    'üçå',
    'üçâ',
    'üçá',
    'üçì',
    'ü´ê',
    'ü•ù',
    'ü•ë',
    'üçç',
    'üçí',
    'ü•≠',
    'ü••',
    'ü•¶',
    'ü•¨',
    'üßÑ',
    'üßÖ',
    'ü•î',
    'ü•ï',
    'üåΩ',
    'üå∂Ô∏è',
    'üçû',
    'ü•ê',
    'ü•ñ',
    'ü•®',
    'üßÄ',
    'ü•ö',
    'üç≥',
    'ü•û',
    'üßá',
    'ü•ì',
    'üçî',
    'üçü',
    'üçï',
    'üå≠',
    'üåÆ',
    'üåØ',
    'ü•ô',
    'ü•ó',
    'üçø',
    'üßà',
    'üç∞',
    'üéÇ',
    'üç™',
    'üç©',
    'üç´',
    'üç¨',
    'üç≠',
    '‚òï',
    'üßÉ',
    'üßã',
    'ü•§',
    'üç∫',
    'üçª',
    'üç∑',
    'üçπ',
    'ü•Ç',
    'üöó',
    'üöï',
    'üöô',
    'üöå',
    'üöé',
    'üèéÔ∏è',
    'üöì',
    'üöë',
    'üöí',
    'üöê',
    'üõª',
    'üöö',
    'üö≤',
    'üõ¥',
    'üõµ',
    'üõ∫',
    'üöÅ',
    '‚úàÔ∏è',
    'üõ´',
    'üõ¨',
    'üöÄ',
    'üõ∏',
    'üö§',
    '‚õµÔ∏è',
    'üè†',
    'üè°',
    'üè¢',
    'üè£',
    'üè§',
    'üè•',
    'üè¶',
    'üè®',
    'üè™',
    'üè´',
    'üè¨',
    'üè≠',
    'üåû',
    'üåù',
    'üåõ',
    'üåú',
    'üåö',
    'üåï',
    'üåñ',
    'üåó',
    'üåò',
    'üåë',
    'üåí',
    'üåì',
    'üåô',
    '‚≠ê',
    'üåü',
    'üå†',
    '‚òÄÔ∏è',
    'üå§Ô∏è',
    '‚õÖ',
    'üå•Ô∏è',
    'üå¶Ô∏è',
    'üåßÔ∏è',
    '‚õàÔ∏è',
    'üå©Ô∏è',
    'üå®Ô∏è',
    '‚ùÑÔ∏è',
    '‚òÉÔ∏è',
    '‚õÑ',
    'üå¨Ô∏è',
    'üí®',
    'üå™Ô∏è',
    'üå´Ô∏è',
    'üåä',
    'üíß',
    'üí¶',
    'üéâ',
    'üéä',
    'üéà',
    'üéÅ',
    'üéÇ',
    'üéÑ',
    'üéÉ',
    'üéÜ',
    'üéá',
    'üß®',
    'üéé',
    'üéê',
    'üíº',
    'üìÅ',
    'üìÇ',
    'üóÇÔ∏è',
    'üßæ',
    'üß∞',
    'üß≤',
    'üîß',
    'üî®',
    '‚öíÔ∏è',
    'üõ†Ô∏è',
    'ü™ì',
    'üß±',
    'ü™ö',
    'ü™õ',
    'üî©',
    '‚öôÔ∏è',
    'üóúÔ∏è',
    '‚öñÔ∏è',
    'üßÆ',
    'üß™',
    'üß´',
    'üß¨',
    'üí¨',
    'üó®Ô∏è',
    'üóØÔ∏è',
    'üí≠',
    '‚ùì',
    '‚ùî',
    '‚ùï',
    '‚ùó',
    '‚ÄºÔ∏è',
    '‚ÅâÔ∏è',
    'üîá',
    'üîà',
    'üîâ',
    'üîä',
    '‚è∞',
    '‚åö',
    '‚è±Ô∏è',
    '‚è≤Ô∏è',
    'üïê',
    'üïë',
    'üïí',
    'üïì',
    'üïî',
    'üïï',
    'üïñ',
    'üïó',
    'üïò',
    'üïô',
    'üïö',
    'üïõ',
  ];

  @override
  void initState() {
    super.initState();
    onCreate();
    _focusNode.addListener(() {
      if (_focusNode.hasFocus && isEmojiVisible) {
        setState(() => isEmojiVisible = false);
      }
    });
  }

  void onCreate() {
    data = widget.data;
    AppUtils.log('üí¨ MessageScreen onCreate called');
    AppUtils.log('üìå Peer user: ${data?.name} (${data?.id})');
    AppUtils.log('üìå Chat ID provided: ${widget.chatId ?? "NULL - Will create new"}');
    AppUtils.log('üìå Current user ID: ${Preferences.uid}');
    AppUtils.log('üìå Socket connected: ${ctrl.isSocketConnected.value}');

    if (widget.chatId != null) {
      AppUtils.log('‚úÖ Using existing chat ID from navigation');
    } else {
      AppUtils.log('‚ö†Ô∏è No chat ID - will create new chat room');
    }

    ctrl.joinSingleChat(data?.id ?? '', widget.chatId);

    AppUtils.log('‚úÖ joinSingleChat called');
  }

  @override
  Widget build(BuildContext context) {
    return PopScope(
      onPopInvokedWithResult: (data, data1) {
        ctrl.onLeaveChatRoom();
      },
      child: Scaffold(
        backgroundColor: AppColors.white,
        body: SafeArea(
          child: GestureDetector(
            onTap: () {
              FocusScope.of(context).unfocus();
            },
            child: Column(
              children: [
                Container(
                  padding: 15.horizontal + 10.vertical,

                  decoration: BoxDecoration(
                    color: Colors.white,
                    border: Border(
                      bottom: BorderSide(
                        color: AppColors.grey.withOpacity(0.3),
                        width: 1,
                      ),
                    ),
                  ),
                  child: Row(
                    children: [
                      GestureDetector(
                        onTap: () {
                          Navigator.pop(context);
                        },
                        child: Container(
                          padding: EdgeInsets.all(8),
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(color: AppColors.greenlight),
                          ),
                          child: Icon(
                            Icons.arrow_back_ios_new_rounded,
                            color: AppColors.greenlight,
                            size: 20,
                          ),
                        ),
                      ),
                      10.width,
                      GestureDetector(
                        onTap: () {
                          if (data?.id != Preferences.uid) {
                            context.pushNavigator(
                              FriendProfileScreen(data: data!),
                            );
                          }
                        },
                        // onTap: () {
                        //   showDialog(
                        //     context: context,
                        //     barrierColor: Colors.transparent,
                        //     barrierDismissible: true,
                        //     builder: (context) {
                        //       return GestureDetector(
                        //         onTap: () => Navigator.pop(context),
                        //         child: Container(
                        //           color: Colors.black,
                        //           alignment: Alignment.center,
                        //           child: _buildZoomableImage(
                        //             ImageDataModel(
                        //               network: AppUtils.configImageUrl(data?.image ?? ''),
                        //               type: ImageType.network,
                        //             ),
                        //           ),
                        //         ),
                        //       );
                        //     },
                        //   );
                        // },
                        child: ImageView(
                          size: 40,
                          radius: 20,
                          fit: BoxFit.cover,
                          url: AppUtils.configImageUrl(data?.image ?? ''),
                          defaultImage: AppImages.dummyProfile,
                          imageType: ImageType.network,
                        ),
                      ),
                      const SizedBox(width: 10),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              data!.name ?? '',
                              style: 16.txtMediumprimary,
                              maxLines: null,
                              softWrap: true,
                              overflow: TextOverflow.visible,
                            ),
                            5.height,
                            Visibility(
                              visible: false,
                              child: Text(
                                'Online',
                                style: TextStyle(
                                  fontSize: 12,
                                  color: AppColors.grey,
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                      const Spacer(),
                      Visibility(
                        visible: false,
                        child: GestureDetector(
                          onTap: () {
                            // _showBottomSheet(context);
                          },
                          child: Icon(
                            Icons.more_vert,
                            size: 22,
                            color: AppColors.primaryColor,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                Expanded(child: ChatSample(peerUser: data)),
                _buildMessageInputField(),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildMessageInputField() {
    final picker = ImagePicker();

    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        Visibility(
          visible: _isEmojiVisible,
          child: GestureDetector(
            onTap: () {
              context.pop();
              setState(() {
                _isEmojiVisible = false;
              });
            },
            child: Container(
              color: Colors.grey.withOpacity(0.5),
              child: Center(
                child: GestureDetector(
                  onTap: _hideEmojiKeyboard,
                  behavior: HitTestBehavior.translucent,
                  child: Container(
                    padding: const EdgeInsets.all(8),
                    height: 250,
                    color: AppColors.white,
                    child: GridView.builder(
                      physics: BouncingScrollPhysics(),
                      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                        crossAxisCount: 8,
                        crossAxisSpacing: 6,
                        mainAxisSpacing: 6,
                      ),
                      itemCount: emojis.length,
                      itemBuilder: (context, index) {
                        return GestureDetector(
                          onTap: () {
                            msgCtrl.text += emojis[index];
                            msgCtrl.selection = TextSelection.fromPosition(
                              TextPosition(offset: msgCtrl.text.length),
                            );
                          },
                          child: Center(
                            child: Text(
                              emojis[index],
                              style: TextStyle(fontSize: 22),
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
        Container(
          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 8),
          constraints: BoxConstraints(minHeight: 70),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: const BorderRadius.only(
              topLeft: Radius.circular(30),
              topRight: Radius.circular(30),
            ),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.1),
                spreadRadius: 2,
                blurRadius: 5,
              ),
            ],
          ),
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.end,
            children: [
              IconButton(
                icon: Icon(
                  Icons.emoji_emotions_outlined,
                  color: AppColors.grey,
                  size: 24,
                ),
                onPressed: _toggleEmojiKeyboard,
                padding: EdgeInsets.all(8),
                constraints: BoxConstraints(minWidth: 40, minHeight: 40),
              ),
              Expanded(
                child: ConstrainedBox(
                  constraints: BoxConstraints(maxHeight: 100),
                  child: TextFormField(
                    controller: msgCtrl,
                    focusNode: _focusNode,
                    keyboardType: TextInputType.multiline,
                    maxLines: null,
                    decoration: InputDecoration(
                      hintText: 'Type something...',
                      border: InputBorder.none,
                      contentPadding: EdgeInsets.symmetric(
                        vertical: 10,
                        horizontal: 4,
                      ),
                    ),
                    onTap: () {
                      if (_isEmojiVisible) {
                        setState(() => _isEmojiVisible = false);
                      }
                    },
                  ),
                ),
              ),
              GestureDetector(
                onTap: () async {
                  showModalBottomSheet(
                    context: context,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.vertical(
                        top: Radius.circular(20),
                      ),
                    ),
                    builder: (_) {
                      return Column(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          ListTile(
                            leading: Padding(
                              padding: 15.top,
                              child: ImageView(
                                url: AppImages.cemaraaa,
                                size: 30,
                              ),
                            ),
                            title: TextView(
                              text: 'Capture Image',
                              style: 16.txtMediumprimary,
                            ),
                            onTap: () async {
                              context.pop();
                              final pickedFile = await picker.pickImage(
                                source: ImageSource.camera,
                              );
                              if (pickedFile != null) {
                                Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder: (_) => ImagePreviewScreen(
                                      imageFile: File(pickedFile.path),
                                      onSend: () {
                                        ctrl
                                            .sendImageMessage(pickedFile)
                                            .applyLoader;
                                        context.pop();
                                      },
                                    ),
                                  ),
                                );
                              }
                            },
                          ),
                          ListTile(
                            leading: Padding(
                              padding: 15.top,
                              child: ImageView(
                                url: AppImages.videoImage,
                                size: 30,
                              ),
                            ),
                            title: TextView(
                              text: 'Capture Video',
                              style: 16.txtMediumprimary,
                            ),
                            onTap: () async {
                              context.pop();
                              final pickedFile = await picker.pickVideo(
                                source: ImageSource.camera,
                              );
                              if (pickedFile != null) {
                                final tempPath = pickedFile.path;
                                final tempFile = File(tempPath);

                                final appDir =
                                    await getApplicationDocumentsDirectory();
                                final fileName = path.basename(tempPath);
                                final savedVideo = await tempFile.copy(
                                  '${appDir.path}/$fileName',
                                );

                                Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder: (_) => VideoPreviewScreen(
                                      videoFile: savedVideo,
                                      onSend: () {
                                        ctrl
                                            .sendVideoMessage(
                                              XFile(savedVideo.path),
                                            )
                                            .applyLoader;
                                        context.pop();
                                      },
                                    ),
                                  ),
                                );
                              }
                            },
                          ),
                          ListTile(
                            leading: Padding(
                              padding: 15.top,
                              child: ImageView(
                                url: AppImages.gallery,
                                size: 30,
                              ),
                            ),
                            title: TextView(
                              text: 'Pick Image',
                              style: 16.txtMediumprimary,
                            ),
                            onTap: () async {
                              context.pop();
                              final pickedFile = await picker.pickImage(
                                source: ImageSource.gallery,
                              );
                              if (pickedFile != null) {
                                Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder: (_) => ImagePreviewScreen(
                                      imageFile: File(pickedFile.path),
                                      onSend: () {
                                        ctrl
                                            .sendImageMessage(pickedFile)
                                            .applyLoader;
                                        context.pop();
                                      },
                                    ),
                                  ),
                                );
                              }
                            },
                          ),
                          ListTile(
                            leading: Padding(
                              padding: 15.top,
                              child: ImageView(
                                url: AppImages.videoicon,
                                size: 30,
                              ),
                            ),
                            title: TextView(
                              text: 'Pick Video',
                              style: 16.txtMediumprimary,
                            ),
                            onTap: () async {
                              context.pop();
                              final pickedVideo = await picker.pickVideo(
                                source: ImageSource.gallery,
                              );
                              if (pickedVideo != null) {
                                ctrl.sendVideoMessage(pickedVideo).applyLoader;
                              }
                            },
                          ),
                        ],
                      );
                    },
                  );
                },
                child: Container(
                  padding: EdgeInsets.all(8),
                  child: ImageView(url: 'assets/images/sharebtm.png', size: 40),
                ),
              ),
              SizedBox(width: 4),
              GestureDetector(
                onTap: () {
                  final messageText = msgCtrl.text.trim();
                  AppUtils.log('üñ±Ô∏è ========== SEND BUTTON CLICKED ==========');
                  AppUtils.log('üìù Message: "$messageText"');
                  AppUtils.log('ÔøΩ Chat ID: ${ctrl.singleChatId}');
                  AppUtils.log('ÔøΩ Socket: ${ctrl.isSocketConnected.value}');
                  AppUtils.log('üë§ User: ${Preferences.uid}');
                  AppUtils.log('=========================================');

                  if (messageText.isEmpty) {
                    AppUtils.log('‚ö†Ô∏è Message is empty, aborting');
                    return;
                  }

                  if (ctrl.singleChatId == null) {
                    AppUtils.logEr('‚ùå CRITICAL: singleChatId is NULL!');
                    AppUtils.logEr('This means joinSingleChat failed or didn\'t complete');
                    AppUtils.toast('Chat not ready. Please close and reopen this chat.');
                    return;
                  }

                  if (!ctrl.isSocketConnected.value) {
                    AppUtils.logEr('‚ùå Socket not connected');
                    AppUtils.toast('Reconnecting... Please wait.');
                    return;
                  }

                  AppUtils.log('‚úÖ All checks passed, sending message...');
                  ctrl.sendTextMsg(messageText);
                  msgCtrl.clear();

                  // Hide emoji keyboard if visible
                  if (_isEmojiVisible) {
                    setState(() {
                      _isEmojiVisible = false;
                    });
                  }
                },
                child: Container(
                  padding: EdgeInsets.all(8),
                  child: ImageView(url: 'assets/images/sendmsg.png', size: 40),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }
}
